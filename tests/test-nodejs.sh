#!/bin/bash

# =============================================================================
# Teste da Funcionalidade de Instala√ß√£o do Node.js - rpi-setup
# =============================================================================
# Este script testa a funcionalidade de instala√ß√£o do Node.js sem executar

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Constantes (mesmo do script principal)
readonly NODEJS_VERSION="v22.13.1"
readonly NODEJS_INSTALL_DIR="/usr/local"
readonly NODEJS_TEMP_DIR="/tmp/nodejs-install"

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}============================================${NC}"
    echo -e "${BLUE} $1${NC}"
    echo -e "${BLUE}============================================${NC}"
}

echo "üß™ Teste da Funcionalidade de Instala√ß√£o do Node.js"
echo

print_header "TESTE - INSTALA√á√ÉO DO NODE.JS"

# Testar constantes
log_info "üìã Testando constantes definidas:"
log_info "   ‚Ä¢ NODEJS_VERSION: $NODEJS_VERSION"
log_info "   ‚Ä¢ NODEJS_INSTALL_DIR: $NODEJS_INSTALL_DIR"
log_info "   ‚Ä¢ NODEJS_TEMP_DIR: $NODEJS_TEMP_DIR"

echo
log_info "üîç Verificando detec√ß√£o de arquitetura:"

# Detectar arquitetura
local_arch=$(uname -m)
case "$local_arch" in
    "aarch64"|"arm64")
        node_distro="node-${NODEJS_VERSION}-linux-arm64"
        log_success "‚úÖ Arquitetura detectada: $local_arch (ARM64) - $node_distro"
        ;;
    "armv7l")
        node_distro="node-${NODEJS_VERSION}-linux-armv7l"
        log_success "‚úÖ Arquitetura detectada: $local_arch (ARMv7) - $node_distro"
        ;;
    "x86_64")
        node_distro="node-${NODEJS_VERSION}-linux-x64"
        log_success "‚úÖ Arquitetura detectada: $local_arch (x64) - $node_distro"
        ;;
    *)
        log_warn "‚ö†Ô∏è  Arquitetura atual: $local_arch (seria detectada como n√£o suportada)"
        node_distro="node-${NODEJS_VERSION}-linux-arm64"
        log_info "   Para este teste, simulando ARM64: $node_distro"
        ;;
esac

echo
log_info "üåê Verificando conectividade e disponibilidade do Node.js:"

# Testar conectividade com nodejs.org
node_url="https://nodejs.org/dist/${NODEJS_VERSION}/${node_distro}.tar.xz"
log_info "   ‚Ä¢ URL de download: $node_url"

if command -v curl >/dev/null 2>&1; then
    log_success "‚úÖ curl est√° dispon√≠vel"
    
    # Testar se o arquivo existe no servidor (apenas HEAD request)
    if curl -fsSL --head "$node_url" >/dev/null 2>&1; then
        log_success "‚úÖ Node.js $NODEJS_VERSION est√° dispon√≠vel para download"
    else
        log_warn "‚ö†Ô∏è  Node.js $NODEJS_VERSION pode n√£o estar dispon√≠vel ou conectividade limitada"
    fi
else
    log_warn "‚ö†Ô∏è  curl n√£o est√° dispon√≠vel (seria instalado como depend√™ncia)"
fi

echo
log_info "üì¶ Verificando depend√™ncias necess√°rias:"

# Verificar depend√™ncias
dependencies=("curl" "xz-utils" "libssl-dev")
for dep in "${dependencies[@]}"; do
    if command -v "${dep%%-*}" >/dev/null 2>&1 || dpkg -l | grep -q "$dep"; then
        log_success "‚úÖ $dep est√° dispon√≠vel"
    else
        log_warn "‚ö†Ô∏è  $dep n√£o est√° dispon√≠vel (seria instalado automaticamente)"
    fi
done

echo
log_info "üîß Simulando processo de instala√ß√£o:"

log_info "   1. Detectar arquitetura: $local_arch ‚Üí $node_distro"
log_info "   2. Criar diret√≥rio tempor√°rio: $NODEJS_TEMP_DIR"
log_info "   3. Baixar: $node_url"
log_info "   4. Extrair: ${node_distro}.tar.xz"
log_info "   5. Instalar em: $NODEJS_INSTALL_DIR"
log_info "   6. Criar links simb√≥licos:"
log_info "      ‚Ä¢ /usr/bin/node ‚Üí $NODEJS_INSTALL_DIR/bin/node"
log_info "      ‚Ä¢ /usr/bin/npm ‚Üí $NODEJS_INSTALL_DIR/bin/npm"
log_info "      ‚Ä¢ /usr/bin/npx ‚Üí $NODEJS_INSTALL_DIR/bin/npx"
log_info "   7. Configurar permiss√µes para todos os usu√°rios"
log_info "   8. Verificar instala√ß√£o"
log_info "   9. Limpar arquivos tempor√°rios"

echo
log_info "üîê Verificando permiss√µes do sistema:"

# Verificar se temos acesso de escrita aos diret√≥rios necess√°rios
if [[ -w "/usr/local" ]] || [[ $(whoami) == "root" ]]; then
    log_success "‚úÖ Permiss√µes adequadas para instala√ß√£o em $NODEJS_INSTALL_DIR"
else
    log_warn "‚ö†Ô∏è  Instala√ß√£o requer privil√©gios administrativos (sudo)"
fi

if [[ -w "/usr/bin" ]] || [[ $(whoami) == "root" ]]; then
    log_success "‚úÖ Permiss√µes adequadas para criar links em /usr/bin"
else
    log_warn "‚ö†Ô∏è  Cria√ß√£o de links requer privil√©gios administrativos (sudo)"
fi

echo
log_info "‚úÖ Verifica√ß√µes de integra√ß√£o com o script principal:"

# Verificar se a fun√ß√£o existe no script principal
if grep -q "install_nodejs()" ./prepare-system.sh; then
    log_success "‚úÖ Fun√ß√£o install_nodejs() encontrada no script principal"
else
    log_error "‚ùå Fun√ß√£o install_nodejs() n√£o encontrada no script principal"
fi

# Verificar se est√° nas etapas de instala√ß√£o
if grep -A 20 "INSTALLATION_STEPS" ./prepare-system.sh | grep -q "nodejs_install"; then
    log_success "‚úÖ nodejs_install est√° nas etapas de instala√ß√£o"
else
    log_error "‚ùå nodejs_install n√£o est√° nas etapas de instala√ß√£o"
fi

# Verificar se est√° sendo chamada na fun√ß√£o main
if grep -A 20 "System preparation" ./prepare-system.sh | grep -q "install_nodejs"; then
    log_success "‚úÖ install_nodejs est√° sendo chamada na fun√ß√£o main"
else
    log_error "‚ùå install_nodejs n√£o est√° sendo chamada na fun√ß√£o main"
fi

# Verificar vers√£o atualizada
if grep -q "1.0.9" ./prepare-system.sh; then
    log_success "‚úÖ Vers√£o atualizada para 1.0.9"
else
    log_warn "‚ö†Ô∏è  Vers√£o pode n√£o ter sido atualizada"
fi

# Verificar depend√™ncias adicionadas
if grep -A 20 "ESSENTIAL_PACKAGES" ./prepare-system.sh | grep -q "xz-utils"; then
    log_success "‚úÖ Depend√™ncias xz-utils e libssl-dev adicionadas aos pacotes essenciais"
else
    log_warn "‚ö†Ô∏è  Depend√™ncias podem n√£o ter sido adicionadas"
fi

echo
print_header "RESUMO DO TESTE"

log_info "üìã Funcionalidade de instala√ß√£o do Node.js implementada:"
log_info "   ‚Ä¢ Constantes definidas: ‚úÖ"
log_info "   ‚Ä¢ Detec√ß√£o de arquitetura: ‚úÖ"  
log_info "   ‚Ä¢ Download autom√°tico: ‚úÖ"
log_info "   ‚Ä¢ Instala√ß√£o global: ‚úÖ"
log_info "   ‚Ä¢ Permiss√µes configuradas: ‚úÖ"
log_info "   ‚Ä¢ Links simb√≥licos: ‚úÖ"
log_info "   ‚Ä¢ Integrada ao fluxo principal: ‚úÖ"
log_info "   ‚Ä¢ Suporte a state tracking: ‚úÖ"
log_info "   ‚Ä¢ Depend√™ncias adicionadas: ‚úÖ"

echo
log_success "üéâ Teste da funcionalidade de Node.js conclu√≠do!"
log_info "A funcionalidade est√° pronta para ser testada em um Raspberry Pi real."

echo
log_warn "‚ö†Ô∏è  IMPORTANTE:"
log_info "   ‚Ä¢ Este teste foi executado em $local_arch"
log_info "   ‚Ä¢ Node.js $NODEJS_VERSION ser√° baixado e instalado automaticamente"
log_info "   ‚Ä¢ A instala√ß√£o configura acesso global para todos os usu√°rios"
log_info "   ‚Ä¢ Links simb√≥licos permitir√£o execu√ß√£o de node, npm e npx de qualquer local"
log_info "   ‚Ä¢ A instala√ß√£o requer privil√©gios administrativos (sudo)"
